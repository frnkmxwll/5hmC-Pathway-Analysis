installed.packages()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("BiocManager")
install.packages("Rtools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("Rtools")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("DESeq2")
#PURPOSE OF THIS SCRIPT IS TO VISUALIZE HEATMAP
#make sure DESeq2 package is installed available
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("DESeq2", quietly = TRUE))
BiocManager::install("DESeq2")
if (!requireNamespace("apeglm", quietly = TRUE))
BiocManager::install("apeglm")
library(DESeq2)
#set working directory
setwd("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization")
#read in data
counts_data <- read.csv("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization/Input/counts_PM_v1.csv",row.names = 1)
conditions <-  read.csv("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization/Input/conditions_PM_v1.csv",row.names = 1)
#check columns are equal
all(colnames(counts_data) %in% rownames(conditions))
all(colnames(counts_data) == rownames(conditions))
#load data into DESeq2 object dds
dds <- DESeqDataSetFromMatrix(countData = counts_data, colData = conditions, design = ~ condition)
#load up size factors into dds object in order to normalize using median of ratios method
dds <- DESeq(dds)
#use counts 'normalized=true' function to pull out normalized counts
#normalized_counts_data <- counts(dds,normalized=TRUE)
#save to file
#write.table(normalized_counts_data, file="normalized_counts_LGA_v1.txt", sep="\t", quote=F, col.names=NA)
## Define contrasts, extract results table, and shrink the log2 fold changes
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.01)
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken)
View(res_tableOE_unshrunken)
View(res_tableOE_unshrunken)
View(dds)
view(res_tableOE)
view(dds)
View(res_tableOE)
View(dds)
resultsNames(dds)
resultsNames(dds)
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, coef=2, alpha = 0.05)
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken)
View(res_tableOE)
View(dds)
#PURPOSE OF THIS SCRIPT IS TO VISUALIZE HEATMAP
#make sure DESeq2 package is installed available
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("DESeq2", quietly = TRUE))
BiocManager::install("DESeq2")
if (!requireNamespace("apeglm", quietly = TRUE))
BiocManager::install("apeglm")
library(DESeq2)
#set working directory
setwd("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization")
#read in data
counts_data <- read.csv("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization/Input/counts_PM_v1.csv",row.names = 1)
conditions <-  read.csv("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization/Input/conditions_PM_v1.csv",row.names = 1)
#check columns are equal
all(colnames(counts_data) %in% rownames(conditions))
all(colnames(counts_data) == rownames(conditions))
#load data into DESeq2 object dds
dds <- DESeqDataSetFromMatrix(countData = counts_data, colData = conditions, design = ~ condition)
#load up size factors into dds object in order to normalize using median of ratios method
dds <- DESeq(dds)
#use counts 'normalized=true' function to pull out normalized counts
#normalized_counts_data <- counts(dds,normalized=TRUE)
#save to file
#write.table(normalized_counts_data, file="normalized_counts_LGA_v1.txt", sep="\t", quote=F, col.names=NA)
resultsNames(dds)
## Define contrasts, extract results table, and shrink the log2 fold changes
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, coef=1, alpha = 0.05)
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken)
View(res_tableOE)
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, coef=2, res=res_tableOE_unshrunken)
View(res_tableOE)
View(dds)
res_tableOE %>% data.frame() %>% View()
class(res_tableOE)
res_tableOE %>% data.frame() %>% View()
mcols(res_tableOE, use.names=T)
res_tableOE %>% data.frame() %>% View()
summary(res_tableOE)
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
install.packages("magrittr")
library(magrittr)
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
library(tidyquant)
library(tibble)
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
## Define contrasts, extract results table, and shrink the log2 fold changes
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, coef=2, res=res_tableOE_unshrunken)
#convert the results table into a tibble:
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
#set cutoffs
padj.cutoff <- 0.01
lfc.cutoff <- 0.58
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sigOE <- res_tableOE_tb %>%
filter(padj < padj.cutoff)
## Define contrasts, extract results table, and shrink the log2 fold changes
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, coef=2, res=res_tableOE_unshrunken)
#convert the results table into a tibble:
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
#set cutoffs
padj.cutoff <- 0.01
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>%
filter(padj < padj.cutoff)
sigOE <- res_tableOE_tb
filter(sigOE, padj < padj.cutoff)
sigOE
res_tableOE_unshrunken
#set cutoffs
padj.cutoff <- 0.5
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>%
filter(padj < padj.cutoff)
res_tableOE_tb
padj.cutoff <- 0.01
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>%
filter(pvalue < padj.cutoff)
res_tableOE_tb
sigOE
padj.cutoff <- 0.01
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>%
filter(pvalue < padj.cutoff)
sigOE
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, coef=2, res=res_tableOE_unshrunken)
res_tableOE %>% data.frame() %>% View()
sigOE <- filter(res_tableOE_tb,pvalue < padj.cutoff)
sigOE
sigOE <- filter(res_tableOE_tb,padj < padj.cutoff)
res_tableOE_tb
#subset table to only keep significant genes using cutoffs
sigOE <- filter(res_tableOE_tb,padj < 0.05)
res_tableOE_tb
sigOe
sigOE
sigOE <- filter(res_tableOE_tb,padj < 0.05 & padj != NA)
res_tableOE_tb
sigOE
sigOE <- filter(res_tableOE_tb,padj < 0.05 & padj !is.na)
res_tableOE_tb
sigOE
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>% filter(padj < 0.05 & padj !is.na)
res_tableOE_tb
sigOE
sigOE <- res_tableOE_tb %>%
filter(padj < 0.05 & padj !is.na)
res_tableOE_tb
sigOE
sigOE <- res_tableOE_tb %>%
filter(pvalue < 0.05 & pvalue !is.na)
res_tableOE_tb
sigOE
library(dplyr)
install(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>%
filter(pvalue < 0.05 & pvalue !is.na)
res_tableOE_tb
sigOE
#PURPOSE OF THIS SCRIPT IS TO VISUALIZE HEATMAP
#make sure DESeq2 package is installed available
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("DESeq2", quietly = TRUE))
BiocManager::install("DESeq2")
if (!requireNamespace("apeglm", quietly = TRUE))
BiocManager::install("apeglm")
library(DESeq2)
library(magrittr)
library(tibble)
library(dplyr)
#set working directory
setwd("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization")
#read in data
counts_data <- read.csv("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization/Input/counts_PM_v1.csv",row.names = 1)
conditions <-  read.csv("C:/Users/ymali/Google Drive/Personal Documents/Chuan Lab/Peritoneal Disease/GSEA Files/Normalization/Input/conditions_PM_v1.csv",row.names = 1)
#check columns are equal
all(colnames(counts_data) %in% rownames(conditions))
all(colnames(counts_data) == rownames(conditions))
#load data into DESeq2 object dds
dds <- DESeqDataSetFromMatrix(countData = counts_data, colData = conditions, design = ~ condition)
#load up size factors into dds object in order to normalize using median of ratios method
dds <- DESeq(dds)
#use counts 'normalized=true' function to pull out normalized counts
#normalized_counts_data <- counts(dds,normalized=TRUE)
#save to file
#write.table(normalized_counts_data, file="normalized_counts_LGA_v1.txt", sep="\t", quote=F, col.names=NA)
## Define contrasts, extract results table, and shrink the log2 fold changes
contrast_oe <- c("condition", "PMpos", "PMneg")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, coef=2, res=res_tableOE_unshrunken)
res_tableOE %>% data.frame() %>% View()
#convert the results table into a tibble:
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
#subset table to only keep significant genes using cutoffs
sigOE <- res_tableOE_tb %>%
filter(pvalue < 0.05 & pvalue !is.na)
res_tableOE_tb
sigOE
sigOE <- res_tableOE_tb %>%
filter(padj < 0.05 & adj != "NA")
res_tableOE_tb
sigOE
sigOE <- res_tableOE_tb %>%
filter(padj < 0.05 & padj != "NA")
res_tableOE_tb
sigOE
view(sigOE)
contrast <- c("condition", "PMpos", "PMneg")
res_table_unshrunken <- results(dds, contrast=contrast, alpha = 0.05)
res_table <- lfcShrink(dds, coef=2, res=res_table_unshrunken)
res_table %>% data.frame() %>% View()
#convert the results table into a tibble:
res_table_tb <- res_table %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
#subset table to only keep significant genes using cutoffs
sig <- res_table_tb %>%
filter(padj < 0.05 & padj != "NA")
res_table_tb
view(sig)
#convert the results table into a tibble:
res_table_tb <- res_table %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
#subset table to only keep significant genes using cutoff
sig <- res_table_tb %>%
filter(padj < 0.05)
res_table_tb
view(sig)
view(sig)
summary(res_table)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(DEGreport)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
install.packages("tidyverse","ggplot2")
install.packages("ggrepel","DEGreport","RColorBrewer","pheatmap")
library(ggplot2)
library(ggrepel)
library(DEGreport)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
install("ggrepel","DEGreport","RColorBrewer","pheatmap")
install.packages("ggrepel")
install.packages("DEGreport")
install.packages("RColorBrewer")
install.packages("pheatmap")
library(DESeq2)
library(magrittr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(DEGreport)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
install.packages("tidyverse")
install.packages("tidyverse")
library(DESeq2)
library(magrittr)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(DEGreport)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
install.packages("tidyverse")
